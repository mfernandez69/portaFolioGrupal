
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Contacto
 * 
 */
export type Contacto = $Result.DefaultSelection<Prisma.$ContactoPayload>
/**
 * Model Colaborador
 * 
 */
export type Colaborador = $Result.DefaultSelection<Prisma.$ColaboradorPayload>
/**
 * Model ProyectoIndividual
 * 
 */
export type ProyectoIndividual = $Result.DefaultSelection<Prisma.$ProyectoIndividualPayload>
/**
 * Model ProyectoGrupal
 * 
 */
export type ProyectoGrupal = $Result.DefaultSelection<Prisma.$ProyectoGrupalPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Colaboradors
 * const colaboradors = await prisma.colaborador.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Colaboradors
   * const colaboradors = await prisma.colaborador.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.colaborador`: Exposes CRUD operations for the **Colaborador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Colaboradors
    * const colaboradors = await prisma.colaborador.findMany()
    * ```
    */
  get colaborador(): Prisma.ColaboradorDelegate<ExtArgs>;

  /**
   * `prisma.proyectoIndividual`: Exposes CRUD operations for the **ProyectoIndividual** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProyectoIndividuals
    * const proyectoIndividuals = await prisma.proyectoIndividual.findMany()
    * ```
    */
  get proyectoIndividual(): Prisma.ProyectoIndividualDelegate<ExtArgs>;

  /**
   * `prisma.proyectoGrupal`: Exposes CRUD operations for the **ProyectoGrupal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProyectoGrupals
    * const proyectoGrupals = await prisma.proyectoGrupal.findMany()
    * ```
    */
  get proyectoGrupal(): Prisma.ProyectoGrupalDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Colaborador: 'Colaborador',
    ProyectoIndividual: 'ProyectoIndividual',
    ProyectoGrupal: 'ProyectoGrupal'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "colaborador" | "proyectoIndividual" | "proyectoGrupal"
      txIsolationLevel: never
    }
    model: {
      Colaborador: {
        payload: Prisma.$ColaboradorPayload<ExtArgs>
        fields: Prisma.ColaboradorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ColaboradorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ColaboradorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          findFirst: {
            args: Prisma.ColaboradorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ColaboradorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          findMany: {
            args: Prisma.ColaboradorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>[]
          }
          create: {
            args: Prisma.ColaboradorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          createMany: {
            args: Prisma.ColaboradorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ColaboradorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          update: {
            args: Prisma.ColaboradorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          deleteMany: {
            args: Prisma.ColaboradorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ColaboradorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ColaboradorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ColaboradorPayload>
          }
          aggregate: {
            args: Prisma.ColaboradorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateColaborador>
          }
          groupBy: {
            args: Prisma.ColaboradorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ColaboradorGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ColaboradorFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ColaboradorAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ColaboradorCountArgs<ExtArgs>
            result: $Utils.Optional<ColaboradorCountAggregateOutputType> | number
          }
        }
      }
      ProyectoIndividual: {
        payload: Prisma.$ProyectoIndividualPayload<ExtArgs>
        fields: Prisma.ProyectoIndividualFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProyectoIndividualFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProyectoIndividualFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          findFirst: {
            args: Prisma.ProyectoIndividualFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProyectoIndividualFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          findMany: {
            args: Prisma.ProyectoIndividualFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>[]
          }
          create: {
            args: Prisma.ProyectoIndividualCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          createMany: {
            args: Prisma.ProyectoIndividualCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProyectoIndividualDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          update: {
            args: Prisma.ProyectoIndividualUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          deleteMany: {
            args: Prisma.ProyectoIndividualDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProyectoIndividualUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProyectoIndividualUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoIndividualPayload>
          }
          aggregate: {
            args: Prisma.ProyectoIndividualAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProyectoIndividual>
          }
          groupBy: {
            args: Prisma.ProyectoIndividualGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProyectoIndividualGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProyectoIndividualFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProyectoIndividualAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProyectoIndividualCountArgs<ExtArgs>
            result: $Utils.Optional<ProyectoIndividualCountAggregateOutputType> | number
          }
        }
      }
      ProyectoGrupal: {
        payload: Prisma.$ProyectoGrupalPayload<ExtArgs>
        fields: Prisma.ProyectoGrupalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProyectoGrupalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProyectoGrupalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          findFirst: {
            args: Prisma.ProyectoGrupalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProyectoGrupalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          findMany: {
            args: Prisma.ProyectoGrupalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>[]
          }
          create: {
            args: Prisma.ProyectoGrupalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          createMany: {
            args: Prisma.ProyectoGrupalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProyectoGrupalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          update: {
            args: Prisma.ProyectoGrupalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          deleteMany: {
            args: Prisma.ProyectoGrupalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProyectoGrupalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProyectoGrupalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProyectoGrupalPayload>
          }
          aggregate: {
            args: Prisma.ProyectoGrupalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProyectoGrupal>
          }
          groupBy: {
            args: Prisma.ProyectoGrupalGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProyectoGrupalGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ProyectoGrupalFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.ProyectoGrupalAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.ProyectoGrupalCountArgs<ExtArgs>
            result: $Utils.Optional<ProyectoGrupalCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ColaboradorCountOutputType
   */

  export type ColaboradorCountOutputType = {
    proyectosIndividuales: number
    proyectosGrupales: number
  }

  export type ColaboradorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proyectosIndividuales?: boolean | ColaboradorCountOutputTypeCountProyectosIndividualesArgs
    proyectosGrupales?: boolean | ColaboradorCountOutputTypeCountProyectosGrupalesArgs
  }

  // Custom InputTypes
  /**
   * ColaboradorCountOutputType without action
   */
  export type ColaboradorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ColaboradorCountOutputType
     */
    select?: ColaboradorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ColaboradorCountOutputType without action
   */
  export type ColaboradorCountOutputTypeCountProyectosIndividualesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProyectoIndividualWhereInput
  }

  /**
   * ColaboradorCountOutputType without action
   */
  export type ColaboradorCountOutputTypeCountProyectosGrupalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProyectoGrupalWhereInput
  }


  /**
   * Count Type ProyectoGrupalCountOutputType
   */

  export type ProyectoGrupalCountOutputType = {
    colaboradores: number
  }

  export type ProyectoGrupalCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | ProyectoGrupalCountOutputTypeCountColaboradoresArgs
  }

  // Custom InputTypes
  /**
   * ProyectoGrupalCountOutputType without action
   */
  export type ProyectoGrupalCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupalCountOutputType
     */
    select?: ProyectoGrupalCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProyectoGrupalCountOutputType without action
   */
  export type ProyectoGrupalCountOutputTypeCountColaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Contacto
   */





  export type ContactoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    usuarioGithub?: boolean
    numeroTelefono?: boolean
  }, ExtArgs["result"]["contacto"]>


  export type ContactoSelectScalar = {
    email?: boolean
    usuarioGithub?: boolean
    numeroTelefono?: boolean
  }


  export type $ContactoPayload = {
    name: "Contacto"
    objects: {}
    scalars: {
      email: string
      usuarioGithub: string
      numeroTelefono: string | null
    }
    composites: {}
  }

  type ContactoGetPayload<S extends boolean | null | undefined | ContactoDefaultArgs> = $Result.GetResult<Prisma.$ContactoPayload, S>





  /**
   * Fields of the Contacto model
   */ 
  interface ContactoFieldRefs {
    readonly email: FieldRef<"Contacto", 'String'>
    readonly usuarioGithub: FieldRef<"Contacto", 'String'>
    readonly numeroTelefono: FieldRef<"Contacto", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Contacto without action
   */
  export type ContactoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contacto
     */
    select?: ContactoSelect<ExtArgs> | null
  }


  /**
   * Model Colaborador
   */

  export type AggregateColaborador = {
    _count: ColaboradorCountAggregateOutputType | null
    _min: ColaboradorMinAggregateOutputType | null
    _max: ColaboradorMaxAggregateOutputType | null
  }

  export type ColaboradorMinAggregateOutputType = {
    id: string | null
    nombre: string | null
  }

  export type ColaboradorMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
  }

  export type ColaboradorCountAggregateOutputType = {
    id: number
    nombre: number
    lenguajesProgramacion: number
    proyectoGrupalIds: number
    _all: number
  }


  export type ColaboradorMinAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type ColaboradorMaxAggregateInputType = {
    id?: true
    nombre?: true
  }

  export type ColaboradorCountAggregateInputType = {
    id?: true
    nombre?: true
    lenguajesProgramacion?: true
    proyectoGrupalIds?: true
    _all?: true
  }

  export type ColaboradorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colaborador to aggregate.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Colaboradors
    **/
    _count?: true | ColaboradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ColaboradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ColaboradorMaxAggregateInputType
  }

  export type GetColaboradorAggregateType<T extends ColaboradorAggregateArgs> = {
        [P in keyof T & keyof AggregateColaborador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateColaborador[P]>
      : GetScalarType<T[P], AggregateColaborador[P]>
  }




  export type ColaboradorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithAggregationInput | ColaboradorOrderByWithAggregationInput[]
    by: ColaboradorScalarFieldEnum[] | ColaboradorScalarFieldEnum
    having?: ColaboradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ColaboradorCountAggregateInputType | true
    _min?: ColaboradorMinAggregateInputType
    _max?: ColaboradorMaxAggregateInputType
  }

  export type ColaboradorGroupByOutputType = {
    id: string
    nombre: string
    lenguajesProgramacion: string[]
    proyectoGrupalIds: string[]
    _count: ColaboradorCountAggregateOutputType | null
    _min: ColaboradorMinAggregateOutputType | null
    _max: ColaboradorMaxAggregateOutputType | null
  }

  type GetColaboradorGroupByPayload<T extends ColaboradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ColaboradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ColaboradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ColaboradorGroupByOutputType[P]>
            : GetScalarType<T[P], ColaboradorGroupByOutputType[P]>
        }
      >
    >


  export type ColaboradorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    contacto?: boolean | ContactoDefaultArgs<ExtArgs>
    lenguajesProgramacion?: boolean
    proyectoGrupalIds?: boolean
    proyectosIndividuales?: boolean | Colaborador$proyectosIndividualesArgs<ExtArgs>
    proyectosGrupales?: boolean | Colaborador$proyectosGrupalesArgs<ExtArgs>
    _count?: boolean | ColaboradorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["colaborador"]>


  export type ColaboradorSelectScalar = {
    id?: boolean
    nombre?: boolean
    lenguajesProgramacion?: boolean
    proyectoGrupalIds?: boolean
  }

  export type ColaboradorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proyectosIndividuales?: boolean | Colaborador$proyectosIndividualesArgs<ExtArgs>
    proyectosGrupales?: boolean | Colaborador$proyectosGrupalesArgs<ExtArgs>
    _count?: boolean | ColaboradorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ColaboradorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Colaborador"
    objects: {
      proyectosIndividuales: Prisma.$ProyectoIndividualPayload<ExtArgs>[]
      proyectosGrupales: Prisma.$ProyectoGrupalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      lenguajesProgramacion: string[]
      proyectoGrupalIds: string[]
    }, ExtArgs["result"]["colaborador"]>
    composites: {
      contacto: Prisma.$ContactoPayload
    }
  }

  type ColaboradorGetPayload<S extends boolean | null | undefined | ColaboradorDefaultArgs> = $Result.GetResult<Prisma.$ColaboradorPayload, S>

  type ColaboradorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ColaboradorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ColaboradorCountAggregateInputType | true
    }

  export interface ColaboradorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Colaborador'], meta: { name: 'Colaborador' } }
    /**
     * Find zero or one Colaborador that matches the filter.
     * @param {ColaboradorFindUniqueArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ColaboradorFindUniqueArgs>(args: SelectSubset<T, ColaboradorFindUniqueArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Colaborador that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ColaboradorFindUniqueOrThrowArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ColaboradorFindUniqueOrThrowArgs>(args: SelectSubset<T, ColaboradorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Colaborador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindFirstArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ColaboradorFindFirstArgs>(args?: SelectSubset<T, ColaboradorFindFirstArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Colaborador that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindFirstOrThrowArgs} args - Arguments to find a Colaborador
     * @example
     * // Get one Colaborador
     * const colaborador = await prisma.colaborador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ColaboradorFindFirstOrThrowArgs>(args?: SelectSubset<T, ColaboradorFindFirstOrThrowArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Colaboradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Colaboradors
     * const colaboradors = await prisma.colaborador.findMany()
     * 
     * // Get first 10 Colaboradors
     * const colaboradors = await prisma.colaborador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const colaboradorWithIdOnly = await prisma.colaborador.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ColaboradorFindManyArgs>(args?: SelectSubset<T, ColaboradorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Colaborador.
     * @param {ColaboradorCreateArgs} args - Arguments to create a Colaborador.
     * @example
     * // Create one Colaborador
     * const Colaborador = await prisma.colaborador.create({
     *   data: {
     *     // ... data to create a Colaborador
     *   }
     * })
     * 
     */
    create<T extends ColaboradorCreateArgs>(args: SelectSubset<T, ColaboradorCreateArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Colaboradors.
     * @param {ColaboradorCreateManyArgs} args - Arguments to create many Colaboradors.
     * @example
     * // Create many Colaboradors
     * const colaborador = await prisma.colaborador.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ColaboradorCreateManyArgs>(args?: SelectSubset<T, ColaboradorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Colaborador.
     * @param {ColaboradorDeleteArgs} args - Arguments to delete one Colaborador.
     * @example
     * // Delete one Colaborador
     * const Colaborador = await prisma.colaborador.delete({
     *   where: {
     *     // ... filter to delete one Colaborador
     *   }
     * })
     * 
     */
    delete<T extends ColaboradorDeleteArgs>(args: SelectSubset<T, ColaboradorDeleteArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Colaborador.
     * @param {ColaboradorUpdateArgs} args - Arguments to update one Colaborador.
     * @example
     * // Update one Colaborador
     * const colaborador = await prisma.colaborador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ColaboradorUpdateArgs>(args: SelectSubset<T, ColaboradorUpdateArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Colaboradors.
     * @param {ColaboradorDeleteManyArgs} args - Arguments to filter Colaboradors to delete.
     * @example
     * // Delete a few Colaboradors
     * const { count } = await prisma.colaborador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ColaboradorDeleteManyArgs>(args?: SelectSubset<T, ColaboradorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Colaboradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Colaboradors
     * const colaborador = await prisma.colaborador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ColaboradorUpdateManyArgs>(args: SelectSubset<T, ColaboradorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Colaborador.
     * @param {ColaboradorUpsertArgs} args - Arguments to update or create a Colaborador.
     * @example
     * // Update or create a Colaborador
     * const colaborador = await prisma.colaborador.upsert({
     *   create: {
     *     // ... data to create a Colaborador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Colaborador we want to update
     *   }
     * })
     */
    upsert<T extends ColaboradorUpsertArgs>(args: SelectSubset<T, ColaboradorUpsertArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Colaboradors that matches the filter.
     * @param {ColaboradorFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const colaborador = await prisma.colaborador.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ColaboradorFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Colaborador.
     * @param {ColaboradorAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const colaborador = await prisma.colaborador.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ColaboradorAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Colaboradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorCountArgs} args - Arguments to filter Colaboradors to count.
     * @example
     * // Count the number of Colaboradors
     * const count = await prisma.colaborador.count({
     *   where: {
     *     // ... the filter for the Colaboradors we want to count
     *   }
     * })
    **/
    count<T extends ColaboradorCountArgs>(
      args?: Subset<T, ColaboradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ColaboradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Colaborador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ColaboradorAggregateArgs>(args: Subset<T, ColaboradorAggregateArgs>): Prisma.PrismaPromise<GetColaboradorAggregateType<T>>

    /**
     * Group by Colaborador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ColaboradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ColaboradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ColaboradorGroupByArgs['orderBy'] }
        : { orderBy?: ColaboradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ColaboradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetColaboradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Colaborador model
   */
  readonly fields: ColaboradorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Colaborador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ColaboradorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proyectosIndividuales<T extends Colaborador$proyectosIndividualesArgs<ExtArgs> = {}>(args?: Subset<T, Colaborador$proyectosIndividualesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findMany"> | Null>
    proyectosGrupales<T extends Colaborador$proyectosGrupalesArgs<ExtArgs> = {}>(args?: Subset<T, Colaborador$proyectosGrupalesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Colaborador model
   */ 
  interface ColaboradorFieldRefs {
    readonly id: FieldRef<"Colaborador", 'String'>
    readonly nombre: FieldRef<"Colaborador", 'String'>
    readonly lenguajesProgramacion: FieldRef<"Colaborador", 'String[]'>
    readonly proyectoGrupalIds: FieldRef<"Colaborador", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Colaborador findUnique
   */
  export type ColaboradorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador findUniqueOrThrow
   */
  export type ColaboradorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador findFirst
   */
  export type ColaboradorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colaboradors.
     */
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador findFirstOrThrow
   */
  export type ColaboradorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaborador to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Colaboradors.
     */
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador findMany
   */
  export type ColaboradorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter, which Colaboradors to fetch.
     */
    where?: ColaboradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Colaboradors to fetch.
     */
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Colaboradors.
     */
    cursor?: ColaboradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Colaboradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Colaboradors.
     */
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * Colaborador create
   */
  export type ColaboradorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The data needed to create a Colaborador.
     */
    data: XOR<ColaboradorCreateInput, ColaboradorUncheckedCreateInput>
  }

  /**
   * Colaborador createMany
   */
  export type ColaboradorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Colaboradors.
     */
    data: ColaboradorCreateManyInput | ColaboradorCreateManyInput[]
  }

  /**
   * Colaborador update
   */
  export type ColaboradorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The data needed to update a Colaborador.
     */
    data: XOR<ColaboradorUpdateInput, ColaboradorUncheckedUpdateInput>
    /**
     * Choose, which Colaborador to update.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador updateMany
   */
  export type ColaboradorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Colaboradors.
     */
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyInput>
    /**
     * Filter which Colaboradors to update
     */
    where?: ColaboradorWhereInput
  }

  /**
   * Colaborador upsert
   */
  export type ColaboradorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * The filter to search for the Colaborador to update in case it exists.
     */
    where: ColaboradorWhereUniqueInput
    /**
     * In case the Colaborador found by the `where` argument doesn't exist, create a new Colaborador with this data.
     */
    create: XOR<ColaboradorCreateInput, ColaboradorUncheckedCreateInput>
    /**
     * In case the Colaborador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ColaboradorUpdateInput, ColaboradorUncheckedUpdateInput>
  }

  /**
   * Colaborador delete
   */
  export type ColaboradorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    /**
     * Filter which Colaborador to delete.
     */
    where: ColaboradorWhereUniqueInput
  }

  /**
   * Colaborador deleteMany
   */
  export type ColaboradorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Colaboradors to delete
     */
    where?: ColaboradorWhereInput
  }

  /**
   * Colaborador findRaw
   */
  export type ColaboradorFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Colaborador aggregateRaw
   */
  export type ColaboradorAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * Colaborador.proyectosIndividuales
   */
  export type Colaborador$proyectosIndividualesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    where?: ProyectoIndividualWhereInput
    orderBy?: ProyectoIndividualOrderByWithRelationInput | ProyectoIndividualOrderByWithRelationInput[]
    cursor?: ProyectoIndividualWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProyectoIndividualScalarFieldEnum | ProyectoIndividualScalarFieldEnum[]
  }

  /**
   * Colaborador.proyectosGrupales
   */
  export type Colaborador$proyectosGrupalesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    where?: ProyectoGrupalWhereInput
    orderBy?: ProyectoGrupalOrderByWithRelationInput | ProyectoGrupalOrderByWithRelationInput[]
    cursor?: ProyectoGrupalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProyectoGrupalScalarFieldEnum | ProyectoGrupalScalarFieldEnum[]
  }

  /**
   * Colaborador without action
   */
  export type ColaboradorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
  }


  /**
   * Model ProyectoIndividual
   */

  export type AggregateProyectoIndividual = {
    _count: ProyectoIndividualCountAggregateOutputType | null
    _min: ProyectoIndividualMinAggregateOutputType | null
    _max: ProyectoIndividualMaxAggregateOutputType | null
  }

  export type ProyectoIndividualMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    colaboradorId: string | null
  }

  export type ProyectoIndividualMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
    colaboradorId: string | null
  }

  export type ProyectoIndividualCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    lenguajesUtilizados: number
    enlacesGithub: number
    colaboradorId: number
    _all: number
  }


  export type ProyectoIndividualMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    colaboradorId?: true
  }

  export type ProyectoIndividualMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    colaboradorId?: true
  }

  export type ProyectoIndividualCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    lenguajesUtilizados?: true
    enlacesGithub?: true
    colaboradorId?: true
    _all?: true
  }

  export type ProyectoIndividualAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProyectoIndividual to aggregate.
     */
    where?: ProyectoIndividualWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoIndividuals to fetch.
     */
    orderBy?: ProyectoIndividualOrderByWithRelationInput | ProyectoIndividualOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProyectoIndividualWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoIndividuals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoIndividuals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProyectoIndividuals
    **/
    _count?: true | ProyectoIndividualCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProyectoIndividualMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProyectoIndividualMaxAggregateInputType
  }

  export type GetProyectoIndividualAggregateType<T extends ProyectoIndividualAggregateArgs> = {
        [P in keyof T & keyof AggregateProyectoIndividual]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProyectoIndividual[P]>
      : GetScalarType<T[P], AggregateProyectoIndividual[P]>
  }




  export type ProyectoIndividualGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProyectoIndividualWhereInput
    orderBy?: ProyectoIndividualOrderByWithAggregationInput | ProyectoIndividualOrderByWithAggregationInput[]
    by: ProyectoIndividualScalarFieldEnum[] | ProyectoIndividualScalarFieldEnum
    having?: ProyectoIndividualScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProyectoIndividualCountAggregateInputType | true
    _min?: ProyectoIndividualMinAggregateInputType
    _max?: ProyectoIndividualMaxAggregateInputType
  }

  export type ProyectoIndividualGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string
    lenguajesUtilizados: string[]
    enlacesGithub: string[]
    colaboradorId: string
    _count: ProyectoIndividualCountAggregateOutputType | null
    _min: ProyectoIndividualMinAggregateOutputType | null
    _max: ProyectoIndividualMaxAggregateOutputType | null
  }

  type GetProyectoIndividualGroupByPayload<T extends ProyectoIndividualGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProyectoIndividualGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProyectoIndividualGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProyectoIndividualGroupByOutputType[P]>
            : GetScalarType<T[P], ProyectoIndividualGroupByOutputType[P]>
        }
      >
    >


  export type ProyectoIndividualSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    lenguajesUtilizados?: boolean
    enlacesGithub?: boolean
    colaboradorId?: boolean
    colaborador?: boolean | ColaboradorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proyectoIndividual"]>


  export type ProyectoIndividualSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    lenguajesUtilizados?: boolean
    enlacesGithub?: boolean
    colaboradorId?: boolean
  }

  export type ProyectoIndividualInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaborador?: boolean | ColaboradorDefaultArgs<ExtArgs>
  }

  export type $ProyectoIndividualPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProyectoIndividual"
    objects: {
      colaborador: Prisma.$ColaboradorPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string
      lenguajesUtilizados: string[]
      enlacesGithub: string[]
      colaboradorId: string
    }, ExtArgs["result"]["proyectoIndividual"]>
    composites: {}
  }

  type ProyectoIndividualGetPayload<S extends boolean | null | undefined | ProyectoIndividualDefaultArgs> = $Result.GetResult<Prisma.$ProyectoIndividualPayload, S>

  type ProyectoIndividualCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProyectoIndividualFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProyectoIndividualCountAggregateInputType | true
    }

  export interface ProyectoIndividualDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProyectoIndividual'], meta: { name: 'ProyectoIndividual' } }
    /**
     * Find zero or one ProyectoIndividual that matches the filter.
     * @param {ProyectoIndividualFindUniqueArgs} args - Arguments to find a ProyectoIndividual
     * @example
     * // Get one ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProyectoIndividualFindUniqueArgs>(args: SelectSubset<T, ProyectoIndividualFindUniqueArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProyectoIndividual that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProyectoIndividualFindUniqueOrThrowArgs} args - Arguments to find a ProyectoIndividual
     * @example
     * // Get one ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProyectoIndividualFindUniqueOrThrowArgs>(args: SelectSubset<T, ProyectoIndividualFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProyectoIndividual that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualFindFirstArgs} args - Arguments to find a ProyectoIndividual
     * @example
     * // Get one ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProyectoIndividualFindFirstArgs>(args?: SelectSubset<T, ProyectoIndividualFindFirstArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProyectoIndividual that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualFindFirstOrThrowArgs} args - Arguments to find a ProyectoIndividual
     * @example
     * // Get one ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProyectoIndividualFindFirstOrThrowArgs>(args?: SelectSubset<T, ProyectoIndividualFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProyectoIndividuals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProyectoIndividuals
     * const proyectoIndividuals = await prisma.proyectoIndividual.findMany()
     * 
     * // Get first 10 ProyectoIndividuals
     * const proyectoIndividuals = await prisma.proyectoIndividual.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proyectoIndividualWithIdOnly = await prisma.proyectoIndividual.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProyectoIndividualFindManyArgs>(args?: SelectSubset<T, ProyectoIndividualFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProyectoIndividual.
     * @param {ProyectoIndividualCreateArgs} args - Arguments to create a ProyectoIndividual.
     * @example
     * // Create one ProyectoIndividual
     * const ProyectoIndividual = await prisma.proyectoIndividual.create({
     *   data: {
     *     // ... data to create a ProyectoIndividual
     *   }
     * })
     * 
     */
    create<T extends ProyectoIndividualCreateArgs>(args: SelectSubset<T, ProyectoIndividualCreateArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProyectoIndividuals.
     * @param {ProyectoIndividualCreateManyArgs} args - Arguments to create many ProyectoIndividuals.
     * @example
     * // Create many ProyectoIndividuals
     * const proyectoIndividual = await prisma.proyectoIndividual.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProyectoIndividualCreateManyArgs>(args?: SelectSubset<T, ProyectoIndividualCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProyectoIndividual.
     * @param {ProyectoIndividualDeleteArgs} args - Arguments to delete one ProyectoIndividual.
     * @example
     * // Delete one ProyectoIndividual
     * const ProyectoIndividual = await prisma.proyectoIndividual.delete({
     *   where: {
     *     // ... filter to delete one ProyectoIndividual
     *   }
     * })
     * 
     */
    delete<T extends ProyectoIndividualDeleteArgs>(args: SelectSubset<T, ProyectoIndividualDeleteArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProyectoIndividual.
     * @param {ProyectoIndividualUpdateArgs} args - Arguments to update one ProyectoIndividual.
     * @example
     * // Update one ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProyectoIndividualUpdateArgs>(args: SelectSubset<T, ProyectoIndividualUpdateArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProyectoIndividuals.
     * @param {ProyectoIndividualDeleteManyArgs} args - Arguments to filter ProyectoIndividuals to delete.
     * @example
     * // Delete a few ProyectoIndividuals
     * const { count } = await prisma.proyectoIndividual.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProyectoIndividualDeleteManyArgs>(args?: SelectSubset<T, ProyectoIndividualDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProyectoIndividuals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProyectoIndividuals
     * const proyectoIndividual = await prisma.proyectoIndividual.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProyectoIndividualUpdateManyArgs>(args: SelectSubset<T, ProyectoIndividualUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProyectoIndividual.
     * @param {ProyectoIndividualUpsertArgs} args - Arguments to update or create a ProyectoIndividual.
     * @example
     * // Update or create a ProyectoIndividual
     * const proyectoIndividual = await prisma.proyectoIndividual.upsert({
     *   create: {
     *     // ... data to create a ProyectoIndividual
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProyectoIndividual we want to update
     *   }
     * })
     */
    upsert<T extends ProyectoIndividualUpsertArgs>(args: SelectSubset<T, ProyectoIndividualUpsertArgs<ExtArgs>>): Prisma__ProyectoIndividualClient<$Result.GetResult<Prisma.$ProyectoIndividualPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ProyectoIndividuals that matches the filter.
     * @param {ProyectoIndividualFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const proyectoIndividual = await prisma.proyectoIndividual.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ProyectoIndividualFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProyectoIndividual.
     * @param {ProyectoIndividualAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const proyectoIndividual = await prisma.proyectoIndividual.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProyectoIndividualAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProyectoIndividuals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualCountArgs} args - Arguments to filter ProyectoIndividuals to count.
     * @example
     * // Count the number of ProyectoIndividuals
     * const count = await prisma.proyectoIndividual.count({
     *   where: {
     *     // ... the filter for the ProyectoIndividuals we want to count
     *   }
     * })
    **/
    count<T extends ProyectoIndividualCountArgs>(
      args?: Subset<T, ProyectoIndividualCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProyectoIndividualCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProyectoIndividual.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProyectoIndividualAggregateArgs>(args: Subset<T, ProyectoIndividualAggregateArgs>): Prisma.PrismaPromise<GetProyectoIndividualAggregateType<T>>

    /**
     * Group by ProyectoIndividual.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoIndividualGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProyectoIndividualGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProyectoIndividualGroupByArgs['orderBy'] }
        : { orderBy?: ProyectoIndividualGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProyectoIndividualGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProyectoIndividualGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProyectoIndividual model
   */
  readonly fields: ProyectoIndividualFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProyectoIndividual.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProyectoIndividualClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaborador<T extends ColaboradorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ColaboradorDefaultArgs<ExtArgs>>): Prisma__ColaboradorClient<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProyectoIndividual model
   */ 
  interface ProyectoIndividualFieldRefs {
    readonly id: FieldRef<"ProyectoIndividual", 'String'>
    readonly nombre: FieldRef<"ProyectoIndividual", 'String'>
    readonly descripcion: FieldRef<"ProyectoIndividual", 'String'>
    readonly lenguajesUtilizados: FieldRef<"ProyectoIndividual", 'String[]'>
    readonly enlacesGithub: FieldRef<"ProyectoIndividual", 'String[]'>
    readonly colaboradorId: FieldRef<"ProyectoIndividual", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProyectoIndividual findUnique
   */
  export type ProyectoIndividualFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoIndividual to fetch.
     */
    where: ProyectoIndividualWhereUniqueInput
  }

  /**
   * ProyectoIndividual findUniqueOrThrow
   */
  export type ProyectoIndividualFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoIndividual to fetch.
     */
    where: ProyectoIndividualWhereUniqueInput
  }

  /**
   * ProyectoIndividual findFirst
   */
  export type ProyectoIndividualFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoIndividual to fetch.
     */
    where?: ProyectoIndividualWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoIndividuals to fetch.
     */
    orderBy?: ProyectoIndividualOrderByWithRelationInput | ProyectoIndividualOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProyectoIndividuals.
     */
    cursor?: ProyectoIndividualWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoIndividuals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoIndividuals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProyectoIndividuals.
     */
    distinct?: ProyectoIndividualScalarFieldEnum | ProyectoIndividualScalarFieldEnum[]
  }

  /**
   * ProyectoIndividual findFirstOrThrow
   */
  export type ProyectoIndividualFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoIndividual to fetch.
     */
    where?: ProyectoIndividualWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoIndividuals to fetch.
     */
    orderBy?: ProyectoIndividualOrderByWithRelationInput | ProyectoIndividualOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProyectoIndividuals.
     */
    cursor?: ProyectoIndividualWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoIndividuals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoIndividuals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProyectoIndividuals.
     */
    distinct?: ProyectoIndividualScalarFieldEnum | ProyectoIndividualScalarFieldEnum[]
  }

  /**
   * ProyectoIndividual findMany
   */
  export type ProyectoIndividualFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoIndividuals to fetch.
     */
    where?: ProyectoIndividualWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoIndividuals to fetch.
     */
    orderBy?: ProyectoIndividualOrderByWithRelationInput | ProyectoIndividualOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProyectoIndividuals.
     */
    cursor?: ProyectoIndividualWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoIndividuals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoIndividuals.
     */
    skip?: number
    distinct?: ProyectoIndividualScalarFieldEnum | ProyectoIndividualScalarFieldEnum[]
  }

  /**
   * ProyectoIndividual create
   */
  export type ProyectoIndividualCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * The data needed to create a ProyectoIndividual.
     */
    data: XOR<ProyectoIndividualCreateInput, ProyectoIndividualUncheckedCreateInput>
  }

  /**
   * ProyectoIndividual createMany
   */
  export type ProyectoIndividualCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProyectoIndividuals.
     */
    data: ProyectoIndividualCreateManyInput | ProyectoIndividualCreateManyInput[]
  }

  /**
   * ProyectoIndividual update
   */
  export type ProyectoIndividualUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * The data needed to update a ProyectoIndividual.
     */
    data: XOR<ProyectoIndividualUpdateInput, ProyectoIndividualUncheckedUpdateInput>
    /**
     * Choose, which ProyectoIndividual to update.
     */
    where: ProyectoIndividualWhereUniqueInput
  }

  /**
   * ProyectoIndividual updateMany
   */
  export type ProyectoIndividualUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProyectoIndividuals.
     */
    data: XOR<ProyectoIndividualUpdateManyMutationInput, ProyectoIndividualUncheckedUpdateManyInput>
    /**
     * Filter which ProyectoIndividuals to update
     */
    where?: ProyectoIndividualWhereInput
  }

  /**
   * ProyectoIndividual upsert
   */
  export type ProyectoIndividualUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * The filter to search for the ProyectoIndividual to update in case it exists.
     */
    where: ProyectoIndividualWhereUniqueInput
    /**
     * In case the ProyectoIndividual found by the `where` argument doesn't exist, create a new ProyectoIndividual with this data.
     */
    create: XOR<ProyectoIndividualCreateInput, ProyectoIndividualUncheckedCreateInput>
    /**
     * In case the ProyectoIndividual was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProyectoIndividualUpdateInput, ProyectoIndividualUncheckedUpdateInput>
  }

  /**
   * ProyectoIndividual delete
   */
  export type ProyectoIndividualDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
    /**
     * Filter which ProyectoIndividual to delete.
     */
    where: ProyectoIndividualWhereUniqueInput
  }

  /**
   * ProyectoIndividual deleteMany
   */
  export type ProyectoIndividualDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProyectoIndividuals to delete
     */
    where?: ProyectoIndividualWhereInput
  }

  /**
   * ProyectoIndividual findRaw
   */
  export type ProyectoIndividualFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProyectoIndividual aggregateRaw
   */
  export type ProyectoIndividualAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProyectoIndividual without action
   */
  export type ProyectoIndividualDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoIndividual
     */
    select?: ProyectoIndividualSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoIndividualInclude<ExtArgs> | null
  }


  /**
   * Model ProyectoGrupal
   */

  export type AggregateProyectoGrupal = {
    _count: ProyectoGrupalCountAggregateOutputType | null
    _min: ProyectoGrupalMinAggregateOutputType | null
    _max: ProyectoGrupalMaxAggregateOutputType | null
  }

  export type ProyectoGrupalMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type ProyectoGrupalMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    descripcion: string | null
  }

  export type ProyectoGrupalCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    lenguajesUtilizados: number
    enlacesGithub: number
    colaboradorIds: number
    _all: number
  }


  export type ProyectoGrupalMinAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type ProyectoGrupalMaxAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
  }

  export type ProyectoGrupalCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    lenguajesUtilizados?: true
    enlacesGithub?: true
    colaboradorIds?: true
    _all?: true
  }

  export type ProyectoGrupalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProyectoGrupal to aggregate.
     */
    where?: ProyectoGrupalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoGrupals to fetch.
     */
    orderBy?: ProyectoGrupalOrderByWithRelationInput | ProyectoGrupalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProyectoGrupalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoGrupals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoGrupals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProyectoGrupals
    **/
    _count?: true | ProyectoGrupalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProyectoGrupalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProyectoGrupalMaxAggregateInputType
  }

  export type GetProyectoGrupalAggregateType<T extends ProyectoGrupalAggregateArgs> = {
        [P in keyof T & keyof AggregateProyectoGrupal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProyectoGrupal[P]>
      : GetScalarType<T[P], AggregateProyectoGrupal[P]>
  }




  export type ProyectoGrupalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProyectoGrupalWhereInput
    orderBy?: ProyectoGrupalOrderByWithAggregationInput | ProyectoGrupalOrderByWithAggregationInput[]
    by: ProyectoGrupalScalarFieldEnum[] | ProyectoGrupalScalarFieldEnum
    having?: ProyectoGrupalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProyectoGrupalCountAggregateInputType | true
    _min?: ProyectoGrupalMinAggregateInputType
    _max?: ProyectoGrupalMaxAggregateInputType
  }

  export type ProyectoGrupalGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string
    lenguajesUtilizados: string[]
    enlacesGithub: string[]
    colaboradorIds: string[]
    _count: ProyectoGrupalCountAggregateOutputType | null
    _min: ProyectoGrupalMinAggregateOutputType | null
    _max: ProyectoGrupalMaxAggregateOutputType | null
  }

  type GetProyectoGrupalGroupByPayload<T extends ProyectoGrupalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProyectoGrupalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProyectoGrupalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProyectoGrupalGroupByOutputType[P]>
            : GetScalarType<T[P], ProyectoGrupalGroupByOutputType[P]>
        }
      >
    >


  export type ProyectoGrupalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    lenguajesUtilizados?: boolean
    enlacesGithub?: boolean
    colaboradorIds?: boolean
    colaboradores?: boolean | ProyectoGrupal$colaboradoresArgs<ExtArgs>
    _count?: boolean | ProyectoGrupalCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proyectoGrupal"]>


  export type ProyectoGrupalSelectScalar = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    lenguajesUtilizados?: boolean
    enlacesGithub?: boolean
    colaboradorIds?: boolean
  }

  export type ProyectoGrupalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    colaboradores?: boolean | ProyectoGrupal$colaboradoresArgs<ExtArgs>
    _count?: boolean | ProyectoGrupalCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ProyectoGrupalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProyectoGrupal"
    objects: {
      colaboradores: Prisma.$ColaboradorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      descripcion: string
      lenguajesUtilizados: string[]
      enlacesGithub: string[]
      colaboradorIds: string[]
    }, ExtArgs["result"]["proyectoGrupal"]>
    composites: {}
  }

  type ProyectoGrupalGetPayload<S extends boolean | null | undefined | ProyectoGrupalDefaultArgs> = $Result.GetResult<Prisma.$ProyectoGrupalPayload, S>

  type ProyectoGrupalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProyectoGrupalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProyectoGrupalCountAggregateInputType | true
    }

  export interface ProyectoGrupalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProyectoGrupal'], meta: { name: 'ProyectoGrupal' } }
    /**
     * Find zero or one ProyectoGrupal that matches the filter.
     * @param {ProyectoGrupalFindUniqueArgs} args - Arguments to find a ProyectoGrupal
     * @example
     * // Get one ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProyectoGrupalFindUniqueArgs>(args: SelectSubset<T, ProyectoGrupalFindUniqueArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProyectoGrupal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProyectoGrupalFindUniqueOrThrowArgs} args - Arguments to find a ProyectoGrupal
     * @example
     * // Get one ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProyectoGrupalFindUniqueOrThrowArgs>(args: SelectSubset<T, ProyectoGrupalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProyectoGrupal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalFindFirstArgs} args - Arguments to find a ProyectoGrupal
     * @example
     * // Get one ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProyectoGrupalFindFirstArgs>(args?: SelectSubset<T, ProyectoGrupalFindFirstArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProyectoGrupal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalFindFirstOrThrowArgs} args - Arguments to find a ProyectoGrupal
     * @example
     * // Get one ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProyectoGrupalFindFirstOrThrowArgs>(args?: SelectSubset<T, ProyectoGrupalFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProyectoGrupals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProyectoGrupals
     * const proyectoGrupals = await prisma.proyectoGrupal.findMany()
     * 
     * // Get first 10 ProyectoGrupals
     * const proyectoGrupals = await prisma.proyectoGrupal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proyectoGrupalWithIdOnly = await prisma.proyectoGrupal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProyectoGrupalFindManyArgs>(args?: SelectSubset<T, ProyectoGrupalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProyectoGrupal.
     * @param {ProyectoGrupalCreateArgs} args - Arguments to create a ProyectoGrupal.
     * @example
     * // Create one ProyectoGrupal
     * const ProyectoGrupal = await prisma.proyectoGrupal.create({
     *   data: {
     *     // ... data to create a ProyectoGrupal
     *   }
     * })
     * 
     */
    create<T extends ProyectoGrupalCreateArgs>(args: SelectSubset<T, ProyectoGrupalCreateArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProyectoGrupals.
     * @param {ProyectoGrupalCreateManyArgs} args - Arguments to create many ProyectoGrupals.
     * @example
     * // Create many ProyectoGrupals
     * const proyectoGrupal = await prisma.proyectoGrupal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProyectoGrupalCreateManyArgs>(args?: SelectSubset<T, ProyectoGrupalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProyectoGrupal.
     * @param {ProyectoGrupalDeleteArgs} args - Arguments to delete one ProyectoGrupal.
     * @example
     * // Delete one ProyectoGrupal
     * const ProyectoGrupal = await prisma.proyectoGrupal.delete({
     *   where: {
     *     // ... filter to delete one ProyectoGrupal
     *   }
     * })
     * 
     */
    delete<T extends ProyectoGrupalDeleteArgs>(args: SelectSubset<T, ProyectoGrupalDeleteArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProyectoGrupal.
     * @param {ProyectoGrupalUpdateArgs} args - Arguments to update one ProyectoGrupal.
     * @example
     * // Update one ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProyectoGrupalUpdateArgs>(args: SelectSubset<T, ProyectoGrupalUpdateArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProyectoGrupals.
     * @param {ProyectoGrupalDeleteManyArgs} args - Arguments to filter ProyectoGrupals to delete.
     * @example
     * // Delete a few ProyectoGrupals
     * const { count } = await prisma.proyectoGrupal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProyectoGrupalDeleteManyArgs>(args?: SelectSubset<T, ProyectoGrupalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProyectoGrupals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProyectoGrupals
     * const proyectoGrupal = await prisma.proyectoGrupal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProyectoGrupalUpdateManyArgs>(args: SelectSubset<T, ProyectoGrupalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProyectoGrupal.
     * @param {ProyectoGrupalUpsertArgs} args - Arguments to update or create a ProyectoGrupal.
     * @example
     * // Update or create a ProyectoGrupal
     * const proyectoGrupal = await prisma.proyectoGrupal.upsert({
     *   create: {
     *     // ... data to create a ProyectoGrupal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProyectoGrupal we want to update
     *   }
     * })
     */
    upsert<T extends ProyectoGrupalUpsertArgs>(args: SelectSubset<T, ProyectoGrupalUpsertArgs<ExtArgs>>): Prisma__ProyectoGrupalClient<$Result.GetResult<Prisma.$ProyectoGrupalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more ProyectoGrupals that matches the filter.
     * @param {ProyectoGrupalFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const proyectoGrupal = await prisma.proyectoGrupal.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: ProyectoGrupalFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProyectoGrupal.
     * @param {ProyectoGrupalAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const proyectoGrupal = await prisma.proyectoGrupal.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: ProyectoGrupalAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of ProyectoGrupals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalCountArgs} args - Arguments to filter ProyectoGrupals to count.
     * @example
     * // Count the number of ProyectoGrupals
     * const count = await prisma.proyectoGrupal.count({
     *   where: {
     *     // ... the filter for the ProyectoGrupals we want to count
     *   }
     * })
    **/
    count<T extends ProyectoGrupalCountArgs>(
      args?: Subset<T, ProyectoGrupalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProyectoGrupalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProyectoGrupal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProyectoGrupalAggregateArgs>(args: Subset<T, ProyectoGrupalAggregateArgs>): Prisma.PrismaPromise<GetProyectoGrupalAggregateType<T>>

    /**
     * Group by ProyectoGrupal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProyectoGrupalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProyectoGrupalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProyectoGrupalGroupByArgs['orderBy'] }
        : { orderBy?: ProyectoGrupalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProyectoGrupalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProyectoGrupalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProyectoGrupal model
   */
  readonly fields: ProyectoGrupalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProyectoGrupal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProyectoGrupalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    colaboradores<T extends ProyectoGrupal$colaboradoresArgs<ExtArgs> = {}>(args?: Subset<T, ProyectoGrupal$colaboradoresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ColaboradorPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProyectoGrupal model
   */ 
  interface ProyectoGrupalFieldRefs {
    readonly id: FieldRef<"ProyectoGrupal", 'String'>
    readonly nombre: FieldRef<"ProyectoGrupal", 'String'>
    readonly descripcion: FieldRef<"ProyectoGrupal", 'String'>
    readonly lenguajesUtilizados: FieldRef<"ProyectoGrupal", 'String[]'>
    readonly enlacesGithub: FieldRef<"ProyectoGrupal", 'String[]'>
    readonly colaboradorIds: FieldRef<"ProyectoGrupal", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * ProyectoGrupal findUnique
   */
  export type ProyectoGrupalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoGrupal to fetch.
     */
    where: ProyectoGrupalWhereUniqueInput
  }

  /**
   * ProyectoGrupal findUniqueOrThrow
   */
  export type ProyectoGrupalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoGrupal to fetch.
     */
    where: ProyectoGrupalWhereUniqueInput
  }

  /**
   * ProyectoGrupal findFirst
   */
  export type ProyectoGrupalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoGrupal to fetch.
     */
    where?: ProyectoGrupalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoGrupals to fetch.
     */
    orderBy?: ProyectoGrupalOrderByWithRelationInput | ProyectoGrupalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProyectoGrupals.
     */
    cursor?: ProyectoGrupalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoGrupals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoGrupals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProyectoGrupals.
     */
    distinct?: ProyectoGrupalScalarFieldEnum | ProyectoGrupalScalarFieldEnum[]
  }

  /**
   * ProyectoGrupal findFirstOrThrow
   */
  export type ProyectoGrupalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoGrupal to fetch.
     */
    where?: ProyectoGrupalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoGrupals to fetch.
     */
    orderBy?: ProyectoGrupalOrderByWithRelationInput | ProyectoGrupalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProyectoGrupals.
     */
    cursor?: ProyectoGrupalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoGrupals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoGrupals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProyectoGrupals.
     */
    distinct?: ProyectoGrupalScalarFieldEnum | ProyectoGrupalScalarFieldEnum[]
  }

  /**
   * ProyectoGrupal findMany
   */
  export type ProyectoGrupalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter, which ProyectoGrupals to fetch.
     */
    where?: ProyectoGrupalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProyectoGrupals to fetch.
     */
    orderBy?: ProyectoGrupalOrderByWithRelationInput | ProyectoGrupalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProyectoGrupals.
     */
    cursor?: ProyectoGrupalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProyectoGrupals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProyectoGrupals.
     */
    skip?: number
    distinct?: ProyectoGrupalScalarFieldEnum | ProyectoGrupalScalarFieldEnum[]
  }

  /**
   * ProyectoGrupal create
   */
  export type ProyectoGrupalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * The data needed to create a ProyectoGrupal.
     */
    data: XOR<ProyectoGrupalCreateInput, ProyectoGrupalUncheckedCreateInput>
  }

  /**
   * ProyectoGrupal createMany
   */
  export type ProyectoGrupalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProyectoGrupals.
     */
    data: ProyectoGrupalCreateManyInput | ProyectoGrupalCreateManyInput[]
  }

  /**
   * ProyectoGrupal update
   */
  export type ProyectoGrupalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * The data needed to update a ProyectoGrupal.
     */
    data: XOR<ProyectoGrupalUpdateInput, ProyectoGrupalUncheckedUpdateInput>
    /**
     * Choose, which ProyectoGrupal to update.
     */
    where: ProyectoGrupalWhereUniqueInput
  }

  /**
   * ProyectoGrupal updateMany
   */
  export type ProyectoGrupalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProyectoGrupals.
     */
    data: XOR<ProyectoGrupalUpdateManyMutationInput, ProyectoGrupalUncheckedUpdateManyInput>
    /**
     * Filter which ProyectoGrupals to update
     */
    where?: ProyectoGrupalWhereInput
  }

  /**
   * ProyectoGrupal upsert
   */
  export type ProyectoGrupalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * The filter to search for the ProyectoGrupal to update in case it exists.
     */
    where: ProyectoGrupalWhereUniqueInput
    /**
     * In case the ProyectoGrupal found by the `where` argument doesn't exist, create a new ProyectoGrupal with this data.
     */
    create: XOR<ProyectoGrupalCreateInput, ProyectoGrupalUncheckedCreateInput>
    /**
     * In case the ProyectoGrupal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProyectoGrupalUpdateInput, ProyectoGrupalUncheckedUpdateInput>
  }

  /**
   * ProyectoGrupal delete
   */
  export type ProyectoGrupalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
    /**
     * Filter which ProyectoGrupal to delete.
     */
    where: ProyectoGrupalWhereUniqueInput
  }

  /**
   * ProyectoGrupal deleteMany
   */
  export type ProyectoGrupalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProyectoGrupals to delete
     */
    where?: ProyectoGrupalWhereInput
  }

  /**
   * ProyectoGrupal findRaw
   */
  export type ProyectoGrupalFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProyectoGrupal aggregateRaw
   */
  export type ProyectoGrupalAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * ProyectoGrupal.colaboradores
   */
  export type ProyectoGrupal$colaboradoresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Colaborador
     */
    select?: ColaboradorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ColaboradorInclude<ExtArgs> | null
    where?: ColaboradorWhereInput
    orderBy?: ColaboradorOrderByWithRelationInput | ColaboradorOrderByWithRelationInput[]
    cursor?: ColaboradorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ColaboradorScalarFieldEnum | ColaboradorScalarFieldEnum[]
  }

  /**
   * ProyectoGrupal without action
   */
  export type ProyectoGrupalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProyectoGrupal
     */
    select?: ProyectoGrupalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProyectoGrupalInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const ColaboradorScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    lenguajesProgramacion: 'lenguajesProgramacion',
    proyectoGrupalIds: 'proyectoGrupalIds'
  };

  export type ColaboradorScalarFieldEnum = (typeof ColaboradorScalarFieldEnum)[keyof typeof ColaboradorScalarFieldEnum]


  export const ProyectoIndividualScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    lenguajesUtilizados: 'lenguajesUtilizados',
    enlacesGithub: 'enlacesGithub',
    colaboradorId: 'colaboradorId'
  };

  export type ProyectoIndividualScalarFieldEnum = (typeof ProyectoIndividualScalarFieldEnum)[keyof typeof ProyectoIndividualScalarFieldEnum]


  export const ProyectoGrupalScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    lenguajesUtilizados: 'lenguajesUtilizados',
    enlacesGithub: 'enlacesGithub',
    colaboradorIds: 'colaboradorIds'
  };

  export type ProyectoGrupalScalarFieldEnum = (typeof ProyectoGrupalScalarFieldEnum)[keyof typeof ProyectoGrupalScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type ColaboradorWhereInput = {
    AND?: ColaboradorWhereInput | ColaboradorWhereInput[]
    OR?: ColaboradorWhereInput[]
    NOT?: ColaboradorWhereInput | ColaboradorWhereInput[]
    id?: StringFilter<"Colaborador"> | string
    nombre?: StringFilter<"Colaborador"> | string
    contacto?: XOR<ContactoCompositeFilter, ContactoObjectEqualityInput>
    lenguajesProgramacion?: StringNullableListFilter<"Colaborador">
    proyectoGrupalIds?: StringNullableListFilter<"Colaborador">
    proyectosIndividuales?: ProyectoIndividualListRelationFilter
    proyectosGrupales?: ProyectoGrupalListRelationFilter
  }

  export type ColaboradorOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    contacto?: ContactoOrderByInput
    lenguajesProgramacion?: SortOrder
    proyectoGrupalIds?: SortOrder
    proyectosIndividuales?: ProyectoIndividualOrderByRelationAggregateInput
    proyectosGrupales?: ProyectoGrupalOrderByRelationAggregateInput
  }

  export type ColaboradorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ColaboradorWhereInput | ColaboradorWhereInput[]
    OR?: ColaboradorWhereInput[]
    NOT?: ColaboradorWhereInput | ColaboradorWhereInput[]
    nombre?: StringFilter<"Colaborador"> | string
    contacto?: XOR<ContactoCompositeFilter, ContactoObjectEqualityInput>
    lenguajesProgramacion?: StringNullableListFilter<"Colaborador">
    proyectoGrupalIds?: StringNullableListFilter<"Colaborador">
    proyectosIndividuales?: ProyectoIndividualListRelationFilter
    proyectosGrupales?: ProyectoGrupalListRelationFilter
  }, "id">

  export type ColaboradorOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    lenguajesProgramacion?: SortOrder
    proyectoGrupalIds?: SortOrder
    _count?: ColaboradorCountOrderByAggregateInput
    _max?: ColaboradorMaxOrderByAggregateInput
    _min?: ColaboradorMinOrderByAggregateInput
  }

  export type ColaboradorScalarWhereWithAggregatesInput = {
    AND?: ColaboradorScalarWhereWithAggregatesInput | ColaboradorScalarWhereWithAggregatesInput[]
    OR?: ColaboradorScalarWhereWithAggregatesInput[]
    NOT?: ColaboradorScalarWhereWithAggregatesInput | ColaboradorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Colaborador"> | string
    nombre?: StringWithAggregatesFilter<"Colaborador"> | string
    lenguajesProgramacion?: StringNullableListFilter<"Colaborador">
    proyectoGrupalIds?: StringNullableListFilter<"Colaborador">
  }

  export type ProyectoIndividualWhereInput = {
    AND?: ProyectoIndividualWhereInput | ProyectoIndividualWhereInput[]
    OR?: ProyectoIndividualWhereInput[]
    NOT?: ProyectoIndividualWhereInput | ProyectoIndividualWhereInput[]
    id?: StringFilter<"ProyectoIndividual"> | string
    nombre?: StringFilter<"ProyectoIndividual"> | string
    descripcion?: StringFilter<"ProyectoIndividual"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoIndividual">
    enlacesGithub?: StringNullableListFilter<"ProyectoIndividual">
    colaboradorId?: StringFilter<"ProyectoIndividual"> | string
    colaborador?: XOR<ColaboradorRelationFilter, ColaboradorWhereInput>
  }

  export type ProyectoIndividualOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorId?: SortOrder
    colaborador?: ColaboradorOrderByWithRelationInput
  }

  export type ProyectoIndividualWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProyectoIndividualWhereInput | ProyectoIndividualWhereInput[]
    OR?: ProyectoIndividualWhereInput[]
    NOT?: ProyectoIndividualWhereInput | ProyectoIndividualWhereInput[]
    nombre?: StringFilter<"ProyectoIndividual"> | string
    descripcion?: StringFilter<"ProyectoIndividual"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoIndividual">
    enlacesGithub?: StringNullableListFilter<"ProyectoIndividual">
    colaboradorId?: StringFilter<"ProyectoIndividual"> | string
    colaborador?: XOR<ColaboradorRelationFilter, ColaboradorWhereInput>
  }, "id">

  export type ProyectoIndividualOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorId?: SortOrder
    _count?: ProyectoIndividualCountOrderByAggregateInput
    _max?: ProyectoIndividualMaxOrderByAggregateInput
    _min?: ProyectoIndividualMinOrderByAggregateInput
  }

  export type ProyectoIndividualScalarWhereWithAggregatesInput = {
    AND?: ProyectoIndividualScalarWhereWithAggregatesInput | ProyectoIndividualScalarWhereWithAggregatesInput[]
    OR?: ProyectoIndividualScalarWhereWithAggregatesInput[]
    NOT?: ProyectoIndividualScalarWhereWithAggregatesInput | ProyectoIndividualScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProyectoIndividual"> | string
    nombre?: StringWithAggregatesFilter<"ProyectoIndividual"> | string
    descripcion?: StringWithAggregatesFilter<"ProyectoIndividual"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoIndividual">
    enlacesGithub?: StringNullableListFilter<"ProyectoIndividual">
    colaboradorId?: StringWithAggregatesFilter<"ProyectoIndividual"> | string
  }

  export type ProyectoGrupalWhereInput = {
    AND?: ProyectoGrupalWhereInput | ProyectoGrupalWhereInput[]
    OR?: ProyectoGrupalWhereInput[]
    NOT?: ProyectoGrupalWhereInput | ProyectoGrupalWhereInput[]
    id?: StringFilter<"ProyectoGrupal"> | string
    nombre?: StringFilter<"ProyectoGrupal"> | string
    descripcion?: StringFilter<"ProyectoGrupal"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoGrupal">
    enlacesGithub?: StringNullableListFilter<"ProyectoGrupal">
    colaboradorIds?: StringNullableListFilter<"ProyectoGrupal">
    colaboradores?: ColaboradorListRelationFilter
  }

  export type ProyectoGrupalOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorIds?: SortOrder
    colaboradores?: ColaboradorOrderByRelationAggregateInput
  }

  export type ProyectoGrupalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProyectoGrupalWhereInput | ProyectoGrupalWhereInput[]
    OR?: ProyectoGrupalWhereInput[]
    NOT?: ProyectoGrupalWhereInput | ProyectoGrupalWhereInput[]
    nombre?: StringFilter<"ProyectoGrupal"> | string
    descripcion?: StringFilter<"ProyectoGrupal"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoGrupal">
    enlacesGithub?: StringNullableListFilter<"ProyectoGrupal">
    colaboradorIds?: StringNullableListFilter<"ProyectoGrupal">
    colaboradores?: ColaboradorListRelationFilter
  }, "id">

  export type ProyectoGrupalOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorIds?: SortOrder
    _count?: ProyectoGrupalCountOrderByAggregateInput
    _max?: ProyectoGrupalMaxOrderByAggregateInput
    _min?: ProyectoGrupalMinOrderByAggregateInput
  }

  export type ProyectoGrupalScalarWhereWithAggregatesInput = {
    AND?: ProyectoGrupalScalarWhereWithAggregatesInput | ProyectoGrupalScalarWhereWithAggregatesInput[]
    OR?: ProyectoGrupalScalarWhereWithAggregatesInput[]
    NOT?: ProyectoGrupalScalarWhereWithAggregatesInput | ProyectoGrupalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProyectoGrupal"> | string
    nombre?: StringWithAggregatesFilter<"ProyectoGrupal"> | string
    descripcion?: StringWithAggregatesFilter<"ProyectoGrupal"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoGrupal">
    enlacesGithub?: StringNullableListFilter<"ProyectoGrupal">
    colaboradorIds?: StringNullableListFilter<"ProyectoGrupal">
  }

  export type ColaboradorCreateInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectosIndividuales?: ProyectoIndividualCreateNestedManyWithoutColaboradorInput
    proyectosGrupales?: ProyectoGrupalCreateNestedManyWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorCreateproyectoGrupalIdsInput | string[]
    proyectosIndividuales?: ProyectoIndividualUncheckedCreateNestedManyWithoutColaboradorInput
    proyectosGrupales?: ProyectoGrupalUncheckedCreateNestedManyWithoutColaboradoresInput
  }

  export type ColaboradorUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectosIndividuales?: ProyectoIndividualUpdateManyWithoutColaboradorNestedInput
    proyectosGrupales?: ProyectoGrupalUpdateManyWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorUpdateproyectoGrupalIdsInput | string[]
    proyectosIndividuales?: ProyectoIndividualUncheckedUpdateManyWithoutColaboradorNestedInput
    proyectosGrupales?: ProyectoGrupalUncheckedUpdateManyWithoutColaboradoresNestedInput
  }

  export type ColaboradorCreateManyInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorCreateproyectoGrupalIdsInput | string[]
  }

  export type ColaboradorUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
  }

  export type ColaboradorUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorUpdateproyectoGrupalIdsInput | string[]
  }

  export type ProyectoIndividualCreateInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
    colaborador: ColaboradorCreateNestedOneWithoutProyectosIndividualesInput
  }

  export type ProyectoIndividualUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
    colaboradorId: string
  }

  export type ProyectoIndividualUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
    colaborador?: ColaboradorUpdateOneRequiredWithoutProyectosIndividualesNestedInput
  }

  export type ProyectoIndividualUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
    colaboradorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProyectoIndividualCreateManyInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
    colaboradorId: string
  }

  export type ProyectoIndividualUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
  }

  export type ProyectoIndividualUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
    colaboradorId?: StringFieldUpdateOperationsInput | string
  }

  export type ProyectoGrupalCreateInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoGrupalCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalCreateenlacesGithubInput | string[]
    colaboradores?: ColaboradorCreateNestedManyWithoutProyectosGrupalesInput
  }

  export type ProyectoGrupalUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoGrupalCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalCreateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalCreatecolaboradorIdsInput | string[]
    colaboradores?: ColaboradorUncheckedCreateNestedManyWithoutProyectosGrupalesInput
  }

  export type ProyectoGrupalUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
    colaboradores?: ColaboradorUpdateManyWithoutProyectosGrupalesNestedInput
  }

  export type ProyectoGrupalUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalUpdatecolaboradorIdsInput | string[]
    colaboradores?: ColaboradorUncheckedUpdateManyWithoutProyectosGrupalesNestedInput
  }

  export type ProyectoGrupalCreateManyInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoGrupalCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalCreateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalCreatecolaboradorIdsInput | string[]
  }

  export type ProyectoGrupalUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
  }

  export type ProyectoGrupalUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalUpdatecolaboradorIdsInput | string[]
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ContactoCompositeFilter = {
    equals?: ContactoObjectEqualityInput
    is?: ContactoWhereInput
    isNot?: ContactoWhereInput
  }

  export type ContactoObjectEqualityInput = {
    email: string
    usuarioGithub: string
    numeroTelefono?: string | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProyectoIndividualListRelationFilter = {
    every?: ProyectoIndividualWhereInput
    some?: ProyectoIndividualWhereInput
    none?: ProyectoIndividualWhereInput
  }

  export type ProyectoGrupalListRelationFilter = {
    every?: ProyectoGrupalWhereInput
    some?: ProyectoGrupalWhereInput
    none?: ProyectoGrupalWhereInput
  }

  export type ContactoOrderByInput = {
    email?: SortOrder
    usuarioGithub?: SortOrder
    numeroTelefono?: SortOrder
  }

  export type ProyectoIndividualOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProyectoGrupalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ColaboradorCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    lenguajesProgramacion?: SortOrder
    proyectoGrupalIds?: SortOrder
  }

  export type ColaboradorMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type ColaboradorMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type ColaboradorRelationFilter = {
    is?: ColaboradorWhereInput
    isNot?: ColaboradorWhereInput
  }

  export type ProyectoIndividualCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorId?: SortOrder
  }

  export type ProyectoIndividualMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    colaboradorId?: SortOrder
  }

  export type ProyectoIndividualMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    colaboradorId?: SortOrder
  }

  export type ColaboradorListRelationFilter = {
    every?: ColaboradorWhereInput
    some?: ColaboradorWhereInput
    none?: ColaboradorWhereInput
  }

  export type ColaboradorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProyectoGrupalCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    lenguajesUtilizados?: SortOrder
    enlacesGithub?: SortOrder
    colaboradorIds?: SortOrder
  }

  export type ProyectoGrupalMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type ProyectoGrupalMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
  }

  export type ContactoCreateEnvelopeInput = {
    set?: ContactoCreateInput
  }

  export type ContactoCreateInput = {
    email: string
    usuarioGithub: string
    numeroTelefono?: string | null
  }

  export type ColaboradorCreatelenguajesProgramacionInput = {
    set: string[]
  }

  export type ProyectoIndividualCreateNestedManyWithoutColaboradorInput = {
    create?: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput> | ProyectoIndividualCreateWithoutColaboradorInput[] | ProyectoIndividualUncheckedCreateWithoutColaboradorInput[]
    connectOrCreate?: ProyectoIndividualCreateOrConnectWithoutColaboradorInput | ProyectoIndividualCreateOrConnectWithoutColaboradorInput[]
    createMany?: ProyectoIndividualCreateManyColaboradorInputEnvelope
    connect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
  }

  export type ProyectoGrupalCreateNestedManyWithoutColaboradoresInput = {
    create?: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput> | ProyectoGrupalCreateWithoutColaboradoresInput[] | ProyectoGrupalUncheckedCreateWithoutColaboradoresInput[]
    connectOrCreate?: ProyectoGrupalCreateOrConnectWithoutColaboradoresInput | ProyectoGrupalCreateOrConnectWithoutColaboradoresInput[]
    connect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
  }

  export type ColaboradorCreateproyectoGrupalIdsInput = {
    set: string[]
  }

  export type ProyectoIndividualUncheckedCreateNestedManyWithoutColaboradorInput = {
    create?: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput> | ProyectoIndividualCreateWithoutColaboradorInput[] | ProyectoIndividualUncheckedCreateWithoutColaboradorInput[]
    connectOrCreate?: ProyectoIndividualCreateOrConnectWithoutColaboradorInput | ProyectoIndividualCreateOrConnectWithoutColaboradorInput[]
    createMany?: ProyectoIndividualCreateManyColaboradorInputEnvelope
    connect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
  }

  export type ProyectoGrupalUncheckedCreateNestedManyWithoutColaboradoresInput = {
    create?: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput> | ProyectoGrupalCreateWithoutColaboradoresInput[] | ProyectoGrupalUncheckedCreateWithoutColaboradoresInput[]
    connectOrCreate?: ProyectoGrupalCreateOrConnectWithoutColaboradoresInput | ProyectoGrupalCreateOrConnectWithoutColaboradoresInput[]
    connect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type ContactoUpdateEnvelopeInput = {
    set?: ContactoCreateInput
    update?: ContactoUpdateInput
  }

  export type ColaboradorUpdatelenguajesProgramacionInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProyectoIndividualUpdateManyWithoutColaboradorNestedInput = {
    create?: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput> | ProyectoIndividualCreateWithoutColaboradorInput[] | ProyectoIndividualUncheckedCreateWithoutColaboradorInput[]
    connectOrCreate?: ProyectoIndividualCreateOrConnectWithoutColaboradorInput | ProyectoIndividualCreateOrConnectWithoutColaboradorInput[]
    upsert?: ProyectoIndividualUpsertWithWhereUniqueWithoutColaboradorInput | ProyectoIndividualUpsertWithWhereUniqueWithoutColaboradorInput[]
    createMany?: ProyectoIndividualCreateManyColaboradorInputEnvelope
    set?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    disconnect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    delete?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    connect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    update?: ProyectoIndividualUpdateWithWhereUniqueWithoutColaboradorInput | ProyectoIndividualUpdateWithWhereUniqueWithoutColaboradorInput[]
    updateMany?: ProyectoIndividualUpdateManyWithWhereWithoutColaboradorInput | ProyectoIndividualUpdateManyWithWhereWithoutColaboradorInput[]
    deleteMany?: ProyectoIndividualScalarWhereInput | ProyectoIndividualScalarWhereInput[]
  }

  export type ProyectoGrupalUpdateManyWithoutColaboradoresNestedInput = {
    create?: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput> | ProyectoGrupalCreateWithoutColaboradoresInput[] | ProyectoGrupalUncheckedCreateWithoutColaboradoresInput[]
    connectOrCreate?: ProyectoGrupalCreateOrConnectWithoutColaboradoresInput | ProyectoGrupalCreateOrConnectWithoutColaboradoresInput[]
    upsert?: ProyectoGrupalUpsertWithWhereUniqueWithoutColaboradoresInput | ProyectoGrupalUpsertWithWhereUniqueWithoutColaboradoresInput[]
    set?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    disconnect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    delete?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    connect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    update?: ProyectoGrupalUpdateWithWhereUniqueWithoutColaboradoresInput | ProyectoGrupalUpdateWithWhereUniqueWithoutColaboradoresInput[]
    updateMany?: ProyectoGrupalUpdateManyWithWhereWithoutColaboradoresInput | ProyectoGrupalUpdateManyWithWhereWithoutColaboradoresInput[]
    deleteMany?: ProyectoGrupalScalarWhereInput | ProyectoGrupalScalarWhereInput[]
  }

  export type ColaboradorUpdateproyectoGrupalIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProyectoIndividualUncheckedUpdateManyWithoutColaboradorNestedInput = {
    create?: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput> | ProyectoIndividualCreateWithoutColaboradorInput[] | ProyectoIndividualUncheckedCreateWithoutColaboradorInput[]
    connectOrCreate?: ProyectoIndividualCreateOrConnectWithoutColaboradorInput | ProyectoIndividualCreateOrConnectWithoutColaboradorInput[]
    upsert?: ProyectoIndividualUpsertWithWhereUniqueWithoutColaboradorInput | ProyectoIndividualUpsertWithWhereUniqueWithoutColaboradorInput[]
    createMany?: ProyectoIndividualCreateManyColaboradorInputEnvelope
    set?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    disconnect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    delete?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    connect?: ProyectoIndividualWhereUniqueInput | ProyectoIndividualWhereUniqueInput[]
    update?: ProyectoIndividualUpdateWithWhereUniqueWithoutColaboradorInput | ProyectoIndividualUpdateWithWhereUniqueWithoutColaboradorInput[]
    updateMany?: ProyectoIndividualUpdateManyWithWhereWithoutColaboradorInput | ProyectoIndividualUpdateManyWithWhereWithoutColaboradorInput[]
    deleteMany?: ProyectoIndividualScalarWhereInput | ProyectoIndividualScalarWhereInput[]
  }

  export type ProyectoGrupalUncheckedUpdateManyWithoutColaboradoresNestedInput = {
    create?: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput> | ProyectoGrupalCreateWithoutColaboradoresInput[] | ProyectoGrupalUncheckedCreateWithoutColaboradoresInput[]
    connectOrCreate?: ProyectoGrupalCreateOrConnectWithoutColaboradoresInput | ProyectoGrupalCreateOrConnectWithoutColaboradoresInput[]
    upsert?: ProyectoGrupalUpsertWithWhereUniqueWithoutColaboradoresInput | ProyectoGrupalUpsertWithWhereUniqueWithoutColaboradoresInput[]
    set?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    disconnect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    delete?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    connect?: ProyectoGrupalWhereUniqueInput | ProyectoGrupalWhereUniqueInput[]
    update?: ProyectoGrupalUpdateWithWhereUniqueWithoutColaboradoresInput | ProyectoGrupalUpdateWithWhereUniqueWithoutColaboradoresInput[]
    updateMany?: ProyectoGrupalUpdateManyWithWhereWithoutColaboradoresInput | ProyectoGrupalUpdateManyWithWhereWithoutColaboradoresInput[]
    deleteMany?: ProyectoGrupalScalarWhereInput | ProyectoGrupalScalarWhereInput[]
  }

  export type ProyectoIndividualCreatelenguajesUtilizadosInput = {
    set: string[]
  }

  export type ProyectoIndividualCreateenlacesGithubInput = {
    set: string[]
  }

  export type ColaboradorCreateNestedOneWithoutProyectosIndividualesInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosIndividualesInput, ColaboradorUncheckedCreateWithoutProyectosIndividualesInput>
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosIndividualesInput
    connect?: ColaboradorWhereUniqueInput
  }

  export type ProyectoIndividualUpdatelenguajesUtilizadosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProyectoIndividualUpdateenlacesGithubInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ColaboradorUpdateOneRequiredWithoutProyectosIndividualesNestedInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosIndividualesInput, ColaboradorUncheckedCreateWithoutProyectosIndividualesInput>
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosIndividualesInput
    upsert?: ColaboradorUpsertWithoutProyectosIndividualesInput
    connect?: ColaboradorWhereUniqueInput
    update?: XOR<XOR<ColaboradorUpdateToOneWithWhereWithoutProyectosIndividualesInput, ColaboradorUpdateWithoutProyectosIndividualesInput>, ColaboradorUncheckedUpdateWithoutProyectosIndividualesInput>
  }

  export type ProyectoGrupalCreatelenguajesUtilizadosInput = {
    set: string[]
  }

  export type ProyectoGrupalCreateenlacesGithubInput = {
    set: string[]
  }

  export type ColaboradorCreateNestedManyWithoutProyectosGrupalesInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput> | ColaboradorCreateWithoutProyectosGrupalesInput[] | ColaboradorUncheckedCreateWithoutProyectosGrupalesInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosGrupalesInput | ColaboradorCreateOrConnectWithoutProyectosGrupalesInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ProyectoGrupalCreatecolaboradorIdsInput = {
    set: string[]
  }

  export type ColaboradorUncheckedCreateNestedManyWithoutProyectosGrupalesInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput> | ColaboradorCreateWithoutProyectosGrupalesInput[] | ColaboradorUncheckedCreateWithoutProyectosGrupalesInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosGrupalesInput | ColaboradorCreateOrConnectWithoutProyectosGrupalesInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
  }

  export type ProyectoGrupalUpdatelenguajesUtilizadosInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProyectoGrupalUpdateenlacesGithubInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ColaboradorUpdateManyWithoutProyectosGrupalesNestedInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput> | ColaboradorCreateWithoutProyectosGrupalesInput[] | ColaboradorUncheckedCreateWithoutProyectosGrupalesInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosGrupalesInput | ColaboradorCreateOrConnectWithoutProyectosGrupalesInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutProyectosGrupalesInput | ColaboradorUpsertWithWhereUniqueWithoutProyectosGrupalesInput[]
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutProyectosGrupalesInput | ColaboradorUpdateWithWhereUniqueWithoutProyectosGrupalesInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutProyectosGrupalesInput | ColaboradorUpdateManyWithWhereWithoutProyectosGrupalesInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type ProyectoGrupalUpdatecolaboradorIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ColaboradorUncheckedUpdateManyWithoutProyectosGrupalesNestedInput = {
    create?: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput> | ColaboradorCreateWithoutProyectosGrupalesInput[] | ColaboradorUncheckedCreateWithoutProyectosGrupalesInput[]
    connectOrCreate?: ColaboradorCreateOrConnectWithoutProyectosGrupalesInput | ColaboradorCreateOrConnectWithoutProyectosGrupalesInput[]
    upsert?: ColaboradorUpsertWithWhereUniqueWithoutProyectosGrupalesInput | ColaboradorUpsertWithWhereUniqueWithoutProyectosGrupalesInput[]
    set?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    disconnect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    delete?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    connect?: ColaboradorWhereUniqueInput | ColaboradorWhereUniqueInput[]
    update?: ColaboradorUpdateWithWhereUniqueWithoutProyectosGrupalesInput | ColaboradorUpdateWithWhereUniqueWithoutProyectosGrupalesInput[]
    updateMany?: ColaboradorUpdateManyWithWhereWithoutProyectosGrupalesInput | ColaboradorUpdateManyWithWhereWithoutProyectosGrupalesInput[]
    deleteMany?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ContactoWhereInput = {
    AND?: ContactoWhereInput | ContactoWhereInput[]
    OR?: ContactoWhereInput[]
    NOT?: ContactoWhereInput | ContactoWhereInput[]
    email?: StringFilter<"Contacto"> | string
    usuarioGithub?: StringFilter<"Contacto"> | string
    numeroTelefono?: StringNullableFilter<"Contacto"> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProyectoIndividualCreateWithoutColaboradorInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
  }

  export type ProyectoIndividualUncheckedCreateWithoutColaboradorInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
  }

  export type ProyectoIndividualCreateOrConnectWithoutColaboradorInput = {
    where: ProyectoIndividualWhereUniqueInput
    create: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput>
  }

  export type ProyectoIndividualCreateManyColaboradorInputEnvelope = {
    data: ProyectoIndividualCreateManyColaboradorInput | ProyectoIndividualCreateManyColaboradorInput[]
  }

  export type ProyectoGrupalCreateWithoutColaboradoresInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoGrupalCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalCreateenlacesGithubInput | string[]
  }

  export type ProyectoGrupalUncheckedCreateWithoutColaboradoresInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoGrupalCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalCreateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalCreatecolaboradorIdsInput | string[]
  }

  export type ProyectoGrupalCreateOrConnectWithoutColaboradoresInput = {
    where: ProyectoGrupalWhereUniqueInput
    create: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput>
  }

  export type ContactoUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    usuarioGithub?: StringFieldUpdateOperationsInput | string
    numeroTelefono?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProyectoIndividualUpsertWithWhereUniqueWithoutColaboradorInput = {
    where: ProyectoIndividualWhereUniqueInput
    update: XOR<ProyectoIndividualUpdateWithoutColaboradorInput, ProyectoIndividualUncheckedUpdateWithoutColaboradorInput>
    create: XOR<ProyectoIndividualCreateWithoutColaboradorInput, ProyectoIndividualUncheckedCreateWithoutColaboradorInput>
  }

  export type ProyectoIndividualUpdateWithWhereUniqueWithoutColaboradorInput = {
    where: ProyectoIndividualWhereUniqueInput
    data: XOR<ProyectoIndividualUpdateWithoutColaboradorInput, ProyectoIndividualUncheckedUpdateWithoutColaboradorInput>
  }

  export type ProyectoIndividualUpdateManyWithWhereWithoutColaboradorInput = {
    where: ProyectoIndividualScalarWhereInput
    data: XOR<ProyectoIndividualUpdateManyMutationInput, ProyectoIndividualUncheckedUpdateManyWithoutColaboradorInput>
  }

  export type ProyectoIndividualScalarWhereInput = {
    AND?: ProyectoIndividualScalarWhereInput | ProyectoIndividualScalarWhereInput[]
    OR?: ProyectoIndividualScalarWhereInput[]
    NOT?: ProyectoIndividualScalarWhereInput | ProyectoIndividualScalarWhereInput[]
    id?: StringFilter<"ProyectoIndividual"> | string
    nombre?: StringFilter<"ProyectoIndividual"> | string
    descripcion?: StringFilter<"ProyectoIndividual"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoIndividual">
    enlacesGithub?: StringNullableListFilter<"ProyectoIndividual">
    colaboradorId?: StringFilter<"ProyectoIndividual"> | string
  }

  export type ProyectoGrupalUpsertWithWhereUniqueWithoutColaboradoresInput = {
    where: ProyectoGrupalWhereUniqueInput
    update: XOR<ProyectoGrupalUpdateWithoutColaboradoresInput, ProyectoGrupalUncheckedUpdateWithoutColaboradoresInput>
    create: XOR<ProyectoGrupalCreateWithoutColaboradoresInput, ProyectoGrupalUncheckedCreateWithoutColaboradoresInput>
  }

  export type ProyectoGrupalUpdateWithWhereUniqueWithoutColaboradoresInput = {
    where: ProyectoGrupalWhereUniqueInput
    data: XOR<ProyectoGrupalUpdateWithoutColaboradoresInput, ProyectoGrupalUncheckedUpdateWithoutColaboradoresInput>
  }

  export type ProyectoGrupalUpdateManyWithWhereWithoutColaboradoresInput = {
    where: ProyectoGrupalScalarWhereInput
    data: XOR<ProyectoGrupalUpdateManyMutationInput, ProyectoGrupalUncheckedUpdateManyWithoutColaboradoresInput>
  }

  export type ProyectoGrupalScalarWhereInput = {
    AND?: ProyectoGrupalScalarWhereInput | ProyectoGrupalScalarWhereInput[]
    OR?: ProyectoGrupalScalarWhereInput[]
    NOT?: ProyectoGrupalScalarWhereInput | ProyectoGrupalScalarWhereInput[]
    id?: StringFilter<"ProyectoGrupal"> | string
    nombre?: StringFilter<"ProyectoGrupal"> | string
    descripcion?: StringFilter<"ProyectoGrupal"> | string
    lenguajesUtilizados?: StringNullableListFilter<"ProyectoGrupal">
    enlacesGithub?: StringNullableListFilter<"ProyectoGrupal">
    colaboradorIds?: StringNullableListFilter<"ProyectoGrupal">
  }

  export type ColaboradorCreateWithoutProyectosIndividualesInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectosGrupales?: ProyectoGrupalCreateNestedManyWithoutColaboradoresInput
  }

  export type ColaboradorUncheckedCreateWithoutProyectosIndividualesInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorCreateproyectoGrupalIdsInput | string[]
    proyectosGrupales?: ProyectoGrupalUncheckedCreateNestedManyWithoutColaboradoresInput
  }

  export type ColaboradorCreateOrConnectWithoutProyectosIndividualesInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutProyectosIndividualesInput, ColaboradorUncheckedCreateWithoutProyectosIndividualesInput>
  }

  export type ColaboradorUpsertWithoutProyectosIndividualesInput = {
    update: XOR<ColaboradorUpdateWithoutProyectosIndividualesInput, ColaboradorUncheckedUpdateWithoutProyectosIndividualesInput>
    create: XOR<ColaboradorCreateWithoutProyectosIndividualesInput, ColaboradorUncheckedCreateWithoutProyectosIndividualesInput>
    where?: ColaboradorWhereInput
  }

  export type ColaboradorUpdateToOneWithWhereWithoutProyectosIndividualesInput = {
    where?: ColaboradorWhereInput
    data: XOR<ColaboradorUpdateWithoutProyectosIndividualesInput, ColaboradorUncheckedUpdateWithoutProyectosIndividualesInput>
  }

  export type ColaboradorUpdateWithoutProyectosIndividualesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectosGrupales?: ProyectoGrupalUpdateManyWithoutColaboradoresNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutProyectosIndividualesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorUpdateproyectoGrupalIdsInput | string[]
    proyectosGrupales?: ProyectoGrupalUncheckedUpdateManyWithoutColaboradoresNestedInput
  }

  export type ColaboradorCreateWithoutProyectosGrupalesInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectosIndividuales?: ProyectoIndividualCreateNestedManyWithoutColaboradorInput
  }

  export type ColaboradorUncheckedCreateWithoutProyectosGrupalesInput = {
    id?: string
    nombre: string
    contacto: XOR<ContactoCreateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorCreatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorCreateproyectoGrupalIdsInput | string[]
    proyectosIndividuales?: ProyectoIndividualUncheckedCreateNestedManyWithoutColaboradorInput
  }

  export type ColaboradorCreateOrConnectWithoutProyectosGrupalesInput = {
    where: ColaboradorWhereUniqueInput
    create: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput>
  }

  export type ColaboradorUpsertWithWhereUniqueWithoutProyectosGrupalesInput = {
    where: ColaboradorWhereUniqueInput
    update: XOR<ColaboradorUpdateWithoutProyectosGrupalesInput, ColaboradorUncheckedUpdateWithoutProyectosGrupalesInput>
    create: XOR<ColaboradorCreateWithoutProyectosGrupalesInput, ColaboradorUncheckedCreateWithoutProyectosGrupalesInput>
  }

  export type ColaboradorUpdateWithWhereUniqueWithoutProyectosGrupalesInput = {
    where: ColaboradorWhereUniqueInput
    data: XOR<ColaboradorUpdateWithoutProyectosGrupalesInput, ColaboradorUncheckedUpdateWithoutProyectosGrupalesInput>
  }

  export type ColaboradorUpdateManyWithWhereWithoutProyectosGrupalesInput = {
    where: ColaboradorScalarWhereInput
    data: XOR<ColaboradorUpdateManyMutationInput, ColaboradorUncheckedUpdateManyWithoutProyectosGrupalesInput>
  }

  export type ColaboradorScalarWhereInput = {
    AND?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
    OR?: ColaboradorScalarWhereInput[]
    NOT?: ColaboradorScalarWhereInput | ColaboradorScalarWhereInput[]
    id?: StringFilter<"Colaborador"> | string
    nombre?: StringFilter<"Colaborador"> | string
    lenguajesProgramacion?: StringNullableListFilter<"Colaborador">
    proyectoGrupalIds?: StringNullableListFilter<"Colaborador">
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type ProyectoIndividualCreateManyColaboradorInput = {
    id?: string
    nombre: string
    descripcion: string
    lenguajesUtilizados?: ProyectoIndividualCreatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualCreateenlacesGithubInput | string[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ProyectoIndividualUpdateWithoutColaboradorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
  }

  export type ProyectoIndividualUncheckedUpdateWithoutColaboradorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
  }

  export type ProyectoIndividualUncheckedUpdateManyWithoutColaboradorInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoIndividualUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoIndividualUpdateenlacesGithubInput | string[]
  }

  export type ProyectoGrupalUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
  }

  export type ProyectoGrupalUncheckedUpdateWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalUpdatecolaboradorIdsInput | string[]
  }

  export type ProyectoGrupalUncheckedUpdateManyWithoutColaboradoresInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: StringFieldUpdateOperationsInput | string
    lenguajesUtilizados?: ProyectoGrupalUpdatelenguajesUtilizadosInput | string[]
    enlacesGithub?: ProyectoGrupalUpdateenlacesGithubInput | string[]
    colaboradorIds?: ProyectoGrupalUpdatecolaboradorIdsInput | string[]
  }

  export type ColaboradorUpdateWithoutProyectosGrupalesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectosIndividuales?: ProyectoIndividualUpdateManyWithoutColaboradorNestedInput
  }

  export type ColaboradorUncheckedUpdateWithoutProyectosGrupalesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorUpdateproyectoGrupalIdsInput | string[]
    proyectosIndividuales?: ProyectoIndividualUncheckedUpdateManyWithoutColaboradorNestedInput
  }

  export type ColaboradorUncheckedUpdateManyWithoutProyectosGrupalesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    contacto?: XOR<ContactoUpdateEnvelopeInput, ContactoCreateInput>
    lenguajesProgramacion?: ColaboradorUpdatelenguajesProgramacionInput | string[]
    proyectoGrupalIds?: ColaboradorUpdateproyectoGrupalIdsInput | string[]
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use ColaboradorCountOutputTypeDefaultArgs instead
     */
    export type ColaboradorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ColaboradorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProyectoGrupalCountOutputTypeDefaultArgs instead
     */
    export type ProyectoGrupalCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProyectoGrupalCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactoDefaultArgs instead
     */
    export type ContactoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ColaboradorDefaultArgs instead
     */
    export type ColaboradorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ColaboradorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProyectoIndividualDefaultArgs instead
     */
    export type ProyectoIndividualArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProyectoIndividualDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProyectoGrupalDefaultArgs instead
     */
    export type ProyectoGrupalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProyectoGrupalDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}